syntax = "proto3";

package google.rpc;

message Status {
  // A simple error code that can be easily handled by the client. The
  // actual error code is defined by `google.rpc.Code`.
  int32 code = 1;

  // A developer-facing human-readable error message in English. It should
  // both explain the error and offer an actionable resolution to it.
  string message = 2;

  // Additional error information that the client code can use to handle
  // the error, such as retry delay or help llink.
  repeated google.protobuf.Any details = 3;
}

message ErrorInfo {
  // The reason of error. This is a constant value that identifies the
  // proximate cause of the error. Error reasons are unique within a particular
  // domian errors. This should be at most 63 characters and match
  ///[A-Z0-9_]+/
  string reason = 1;

  // The logical grouping to witch the "reason" belongs. The error domain
  // is typically the registered service name of the tool or product that
  // generates the error. Example: "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a
  // globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is "googleleapis.com".
  string domain = 2;

  // Additional structured details about this error.
  //
  // Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in 
  // length. When identifying the current value of an exceeded limit, the units
  // should be contained in the key, not the value. For example, rather than
  // {"instanceLimit": "100/request"}, should be returned as,
  // {"instanceLimitPerRequest": 100""}, if the client exceeds the number of
  // instances that can be created in a single (batch) request.
  map<string, string> metadata = 3;
}